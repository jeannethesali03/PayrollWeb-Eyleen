@model List<EvaluacionDesempenoViewModel>

@{
    ViewData["Title"] = "Ver Evaluación de Desempeño";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    body {
        background-color: #f2f9ff;
    }



    h2 {
        color: #007bff;
        padding-bottom: 15px;
        border-bottom: 1px solid #e9ecef;
        margin-bottom: 25px;
    }

    .card {
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        border: none;
        margin-bottom: 20px;
    }

    .card-header {
        background-color: #007bff !important;
        color: white !important;
        border-radius: 10px 10px 0 0 !important;
        padding: 15px 20px;
    }

    .table {
        border-collapse: separate;
        border-spacing: 0;
        border-radius: 10px;
        overflow: hidden;
    }

        .table thead {
            background-color: #007bff;
            color: white;
        }

        .table th {
            border: none;
            padding: 12px 15px;
        }

        .table td {
            padding: 12px 15px;
            vertical-align: middle;
            border: 1px solid #dee2e6;
        }

        .table tbody tr:nth-child(even) {
            background-color: #f8fafc;
        }

        .table tbody tr:hover {
            background-color: #e9f5ff;
        }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0069d9;
            border-color: #0062cc;
        }

    .btn-outline-secondary {
        color: #6c757d;
        border-color: #6c757d;
    }

        .btn-outline-secondary:hover {
            background-color: #6c757d;
            color: white;
        }

    .alert {
        border-radius: 8px;
        padding: 15px;
    }

    .alert-danger {
        background-color: #f8d7da;
        border-color: #f5c6cb;
        color: #721c24;
    }

    .alert-success {
        background-color: #d4edda;
        border-color: #c3e6cb;
        color: #155724;
    }

    .alert-info {
        background-color: #d1ecf1;
        border-color: #bee5eb;
        color: #0c5460;
    }

    .badge.bg-info {
        background-color: #17a2b8 !important;
    }

    .text-warning {
        color: #007bff !important;
    }

    .text-secondary {
        color: #6c757d !important;
    }

    .card-footer {
        background-color: #f8f9fa;
        border-top: 1px solid #e9ecef;
        font-size: 0.85rem;
    }

    .form-control {
        border-radius: 5px;
        padding: 10px 15px;
    }

    .form-label {
        font-weight: 500;
    }
</style>

<div class="container" style="background-color: white; border-radius: 10px; padding: 25px; box-shadow: 0 2px 10px rgba(0,0,0,0.1)">

    <h2 class="text-primary"><i class="bi bi-graph-up text-primary"></i> Evaluaciones de @ViewBag.Empleado.Nombre</h2>

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-delete-later">
            <i class="bi bi-exclamation-circle"></i> @TempData["Error"]
        </div>
    }

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-delete-later">
            <i class="bi bi-check-circle"></i> @TempData["Success"]
        </div>
    }

    <!-- Filtro por fecha única -->
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0"><i class="bi bi-funnel"></i> Filtrar Evaluaciones por Fecha</h5>
            @if (!Context.Request.Query.ContainsKey("fechaInicio"))
            {
                <span class="badge bg-info"><i class="bi bi-bar-chart-line"></i> Mostrando promedio de todas las evaluaciones</span>
            }
        </div>
        <div class="card-body">
            <form id="filtroForm" method="get"
                  asp-controller="EvaluacionEmpleado"
                  asp-action="MisEvaluaciones"
                  asp-route-idEmpleado="@ViewBag.Empleado.IdEmpleado">
                <div class="row align-items-end">
                    <div class="col-md-8">
                        <label for="fechaEvaluacion" class="form-label"><i class="bi bi-calendar"></i> Seleccione una fecha</label>
                        <input type="date" class="form-control" id="fechaEvaluacion" name="fechaInicio"
                               value="@Context.Request.Query["fechaInicio"]">
                    </div>
                    <div class="col-md-4">
                        <button type="submit" class="btn btn-primary me-2"><i class="bi bi-filter"></i> Filtrar</button>
                        <a href="@Url.Action("MisEvaluaciones", "EvaluacionEmpleado", new { idEmpleado = ViewBag.Empleado.IdEmpleado })"
                           class="btn btn-outline-secondary"><i class="bi bi-list-ul"></i> Mostrar todas</a>
                    </div>
                </div>
                <input type="hidden" name="fechaFin" value="@Context.Request.Query["fechaInicio"]">
            </form>
        </div>
    </div>

    <!-- Tabla de Evaluaciones de Desempeño existentes -->
    @if (Model.Any())
    {
        var fechasUnicas = Model
        .Select(e => e.fecha.Date)
        .Distinct()
        .OrderByDescending(f => f)
        .ToList();

        foreach (var fecha in fechasUnicas)
        {
            <div class="border-primary mb-3 mt-5">
                <div class="text-primary">
                    <h5 class="mb-0"><i class="bi bi-calendar-check"></i> Evaluaciones del día @fecha.ToString("dd-MM-yyyy")</h5>
                </div>
            </div>

            <div class="table-responsive">
                <table class="table table-hover mb-4">
                    <thead>
                        <tr>
                            <th><i class="bi bi-calendar"></i> Fecha</th>
                            <th><i class="bi bi-list-check"></i> KPI Evaluado</th>
                            <th><i class="bi bi-star"></i> Puntuación</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var evaluacion in Model.Where(e => e.fecha.Date == fecha))
                        {
                            <tr>
                                <td>@evaluacion.fecha.ToString("dd/MM/yyyy")</td>
                                <td>@evaluacion.KPI.Nombre</td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        @evaluacion.puntuacion
                                        <div class="ms-2">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                <span class="@(i <= evaluacion.puntuacion ? "text-primary" : "text-secondary")">★</span>
                                            }
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
    else
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle"></i>
            @if (Context.Request.Query.ContainsKey("fechaInicio"))
            {
                <span>No se encontraron evaluaciones para la fecha especificada.</span>
            }
            else
            {
                <span>No hay evaluaciones registradas para este empleado.</span>
            }
        </div>
    }

    <!-- Gráfica comparativa -->
    <div class="card mt-5">
        <div class="card-header">
            <h5 class="mb-0"><i class="bi bi-bar-chart"></i> Comparación de Desempeño</h5>
        </div>
        <div class="card-body">
            <canvas id="desempenoChart" height="300"></canvas>
        </div>
        <div class="card-footer text-muted">
            <small><i class="bi bi-info-circle"></i> Línea azul: @(Context.Request.Query.ContainsKey("fechaInicio") ? "Puntuación actual" : "Puntuación promedio") | Línea verde: Puntuación ideal (5 en todos los KPIs)</small>
        </div>
    </div>
</div>

<!-- Bootstrap Icons -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.0/font/bootstrap-icons.css">



@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Datos para la gráfica
        const kpiNames = [
        @foreach (var kpi in ViewBag.KPIs)
        {
            @Html.Raw($"'{kpi.Nombre}',")
        }
                ];

        const puntuaciones = [
        @foreach (var dato in ViewBag.DatosGrafica)
        {
            @Html.Raw($"{dato},")
        }
                ];

        const tieneFiltroFecha = @(Context.Request.Query.ContainsKey("fechaInicio") ? "true" : "false");
        const tituloGrafica = tieneFiltroFecha ? 'Comparación de Desempeño (Fecha específica)' : 'Comparación de Desempeño (Promedio general)';
        const etiquetaDataset = tieneFiltroFecha ? 'Puntuación Actual' : 'Puntuación Promedio';

        // Configuración de la gráfica
        const ctx = document.getElementById('desempenoChart').getContext('2d');
        const desempenoChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: kpiNames,
                datasets: [
                    {
                        label: etiquetaDataset,
                        data: puntuaciones,
                        borderColor: 'rgb(54, 162, 235)',
                        backgroundColor: 'rgba(54, 162, 235, 0.5)',
                        tension: 0.1,
                        fill: false
                    },
                    {
                        label: 'Puntuación Ideal',
                        data: Array(kpiNames.length).fill(5),
                        borderColor: 'rgb(75, 192, 192)',
                        backgroundColor: 'rgba(75, 192, 192, 0.5)',
                        tension: 0,
                        fill: false
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: tituloGrafica
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                let label = context.dataset.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                if (context.parsed.y !== null) {
                                    // Mostrar con 1 decimal si es promedio
                                    const value = tieneFiltroFecha ? context.parsed.y : context.parsed.y.toFixed(1);
                                    label += value;
                                }
                                return label;
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 5,
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });

        // Función para validar fecha única
        function validarFechaUnica(fechaSeleccionada) {
            const fechaInput = document.getElementById('fecha');
            const fechaError = document.getElementById('fechaError');
            const submitButton = document.getElementById('submitButton');

            // Obtener todas las fechas existentes del empleado
            const fechasExistentes = [
        @{
            var todasEvaluaciones = ViewBag.Evaluaciones;
            foreach (var eval in todasEvaluaciones)
            {
                @Html.Raw($"'{eval.fecha.ToString("yyyy-MM-dd")}',")
            }
        }
                    ].filter(Boolean);

            // Verificar si la fecha ya existe en cualquier evaluación
            if (fechasExistentes.includes(fechaSeleccionada)) {
                fechaInput.classList.add('is-invalid');
                fechaError.style.display = 'block';
                fechaError.textContent = 'Ya existe una evaluación para esta fecha. No se pueden agregar evaluaciones a fechas ya evaluadas.';
                submitButton.disabled = true;
            } else {
                fechaInput.classList.remove('is-invalid');
                fechaError.style.display = 'none';
                submitButton.disabled = false;
            }
        }

        // Función para editar evaluación
        function editarEvaluacion(idEvaluacion, fecha, idKpi, puntuacion) {
            document.getElementById('evaluacionId').value = idEvaluacion;
            document.getElementById('editFecha').value = fecha;
            document.getElementById('fechaMostrada').value = fecha;
            document.getElementById('editIdKpi').value = idKpi;

            // Seleccionar el radio button correspondiente a la puntuación
            document.querySelector(`input[name="Puntuacion"][value="${puntuacion}"]`).checked = true;

            // Configurar el formulario para enviar a la acción de actualización
            document.getElementById('editarEvaluacionForm').action = '/Evaluacion/ActualizarEvaluacion';

            // Mostrar el modal
            var modal = new bootstrap.Modal(document.getElementById('evaluacionModal'));
            modal.show();
        }

        // Habilitar el botón de submit cuando se seleccione al menos un radio button
        document.querySelectorAll('input[type="radio"][name^="Puntuaciones"]').forEach(radio => {
            radio.addEventListener('change', function () {
                const submitButton = document.getElementById('submitButton');
                const checkedRadios = document.querySelectorAll('input[type="radio"][name^="Puntuaciones"]:checked');
                submitButton.disabled = checkedRadios.length === 0;
            });
        });
    </script>
}